---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import BaseHead from "$lib/components/BaseHead.astro";
import Header from "$lib/components/Header.astro";
import Footer from "$lib/components/Footer.astro";
import FormattedDate from "$lib/components/FormattedDate.astro";
import { Button } from "$lib/components/ui/button";
import { slide } from "astro:transitions";

type Props = CollectionEntry<"blog">["data"];

const { isPublic = true, title, description, pubDate, type, heroImage } = Astro.props;
const posts = (await getCollection("blog")).filter((post) => post.data.isPublic !== false).sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

const currentIndex = posts.findIndex((post) => post.slug === Astro.params.slug);
const post = posts[currentIndex];
const previousPost = posts[currentIndex + 1]?.slug;
const nextPost = posts[currentIndex - 1]?.slug;
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} image={heroImage} />
  </head>

  <body data-astro-prefetch>
    <div class:list={[isPublic ? "hidden" : "bg-destructive py-2 text-center text-destructive-foreground"]}>
      <p class="text-sm">This post is not public.</p>
    </div>
    <Header />
    <main class:list={[isPublic ? "" : "hidden", "relative overflow-hidden py-8"]}>
      <article class="prose prose-lg prose-neutral !prose-invert relative mx-auto mt-6 max-w-4xl px-4 py-4 prose-headings:scroll-m-20 prose-a:text-white prose-img:pointer-events-none prose-img:w-full prose-img:rounded-lg prose-video:w-full prose-video:rounded-lg sm:px-4 lg:px-6">
        <style>
          article *:not(img) {
            max-width: 42rem;
          }

          article img {
            max-width: 56rem;
          }
        </style>
        <div class="mx-auto mb-5 mt-0 max-w-2xl">
          <div class="mx-auto">
            <div class="relative z-50 text-xs font-bold text-neutral-300">
              <span class="relative z-50 block uppercase" transition:name={post.slug + type}>{type}</span>
              <span class="relative z-50 mt-1 block text-sm font-semibold" transition:name={post.slug + pubDate}>
                <FormattedDate date={pubDate} />
              </span>
            </div>
          </div>
        </div>
        <div class="mx-auto mb-0 mt-0 max-w-2xl">
          <div class="mx-auto">
            <h1 class="relative z-50 text-5xl font-bold text-white" transition:name={post.slug + title}>{title}</h1>
          </div>
        </div>
        {
          description && (
            <div transition:animate={slide({ duration: "700ms" })} class="mx-auto mb-0 mt-5 max-w-2xl">
              <div class="mx-auto">
                <p class="relative z-50 text-2xl font-medium leading-7 text-white" set:html={description} />
              </div>
            </div>
          )
        }
        {heroImage && <img src={heroImage} transition:name={post.slug + heroImage} alt="heroImage" class="mx-auto" />}
        <div class="prose-lg mx-auto leading-[1.688rem]">
          <slot />
        </div>
      </article>
    </main>
    <!-- Previous/Next post -->
    <div class="navigation">
      <div class={`flex max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 ${previousPost && nextPost ? "justify-between" : previousPost ? "justify-start" : nextPost ? "justify-end" : ""}`}>
        {
          previousPost && (
            <Button href={`/${previousPost}`} variant="outline" class="group flex h-auto flex-row-reverse p-4 text-sm font-medium text-muted-foreground">
              <div class="ml-2 text-muted-foreground">
                Previous
                <p class="text-white">{posts[currentIndex + 1].data.title}</p>
              </div>
              <div>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-left-circle size-5 transition-all duration-300 group-hover:-translate-x-1">
                  <circle cx="12" cy="12" r="10" />
                  <path d="M16 12H8" />
                  <path d="m12 8-4 4 4 4" />
                </svg>
              </div>
            </Button>
          )
        }
        {
          nextPost && (
            <Button href={`/${nextPost}`} variant="outline" class="group flex h-auto p-4 text-sm font-medium text-muted-foreground">
              <div class="mr-2 text-muted-foreground">
                Next
                <p class="text-white">{posts[currentIndex - 1].data.title}</p>
              </div>
              <div>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-right-circle size-5 transition-all duration-300 group-hover:translate-x-1">
                  <circle cx="12" cy="12" r="10" />
                  <path d="M8 12h8" />
                  <path d="m12 16 4-4-4-4" />
                </svg>
              </div>
            </Button>
          )
        }
      </div>
    </div>

    <Footer />
  </body>
</html>
